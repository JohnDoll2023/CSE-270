// in a sense, these are 1d julia sets which answer the question:
// for this value of C, which seedss escape the funciton f(x) = x ** 2 + C

// a number escapes to infinity if it ever gets bigger than the escape radius
const ESCAPE_RADIUS = 5;
//f(x) = x ** 2 + C
let C;

// if seed doesnt escape after this many tries, then give up and assume never escapes
const BAILOUT = 10;

function setup() {
  createCanvas(400, 400);
  //let x = 3;
  //console.log(escapes(0.5))
  // for (let x = -1.5; x <= 1.5; x+=.1) {
  //   console.log(x, escapes(x));
  // }
  C = -2.0375;
  //console.log(escapes(0));
  // for (let seed = -2; seed <= 2; seed += .1) {
  //   console.log(seed, escapes(seed));
  // }
  
  // draw 1d julia set at each y value where y gets mapped to interesting range of C values
  for (let y = 0; y < height; y++) {
    C = map(y, 0, height, 0.3, -3)
    showLine(y);
  }
  
}

// function mouseMoved() {
//   C = map(mouseY, 0, height, 0.3, -3)
//   background(0);
//   console.log(C)
//   showLine();
// }

// draws the number line coloring points based on whether they escape to infinity in f(x)
function showLine(y) {
  for (let x = 0; x < width; x++) {
    let seed = map(x, 0, width, -3, 3)
    if (escapes(seed)) {
      set(x, y, color(255, 0, 0)); // red escapes
    } else {
      set(x, y, color(0, 255, 0)); //green does not escape
    }
  }
  updatePixels();
}

//returns true if given seed, x, will escape to infinity
function escapes(x) {
  let steps = 0;
  while(x < ESCAPE_RADIUS && steps < BAILOUT) {
    x = f(x);
    steps++;
  }
  return steps != BAILOUT;
}

// function to be iterated
function f(x) {
  return x ** 2 + C;
}